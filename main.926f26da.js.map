{"version":3,"sources":["scripts/main.js"],"names":["document","addEventListener","table","querySelector","tbody","headers","querySelectorAll","currentSortColumn","isAscending","forEach","header","index","columnIndex","rows","Array","from","sort","a","b","aValue","cells","textContent","trim","bValue","currencyRegex","aNumber","parseFloat","replace","bNumber","isNaN","localeCompare","innerHTML","row","appendChild"],"mappings":";AAAA,aAEAA,SAASC,iBAAiB,mBAAoB,WACtCC,IAAAA,EAAQF,SAASG,cAAc,SAC/BC,EAAQF,EAAMC,cAAc,SAC5BE,EAAUH,EAAMI,iBAAiB,MACnCC,EAAoB,KACpBC,GAAc,EAElBH,EAAQI,QAAQ,SAACC,EAAQC,GACvBD,EAAOT,iBAAiB,QAAS,WACzBW,IAAAA,EAAcD,EAEhBC,IAAgBL,EAClBC,GAAeA,GAEfA,GAAc,EACdD,EAAoBK,GAGhBC,IAAAA,EAAOC,MAAMC,KAAKX,EAAME,iBAAiB,OAE/CO,EAAKG,KAAK,SAACC,EAAGC,GACNC,IAAAA,EAASF,EAAEG,MAAMR,GAAaS,YAAYC,OAC1CC,EAASL,EAAEE,MAAMR,GAAaS,YAAYC,OAE1CE,EAAgB,QAChBC,EAAUC,WAAWP,EAAOQ,QAAQH,EAAe,KACnDI,EAAUF,WAAWH,EAAOI,QAAQH,EAAe,KAErD,OAACK,MAAMJ,IAAaI,MAAMD,GAGrBpB,EAAcW,EAAOW,cAAcP,GACtCA,EAAOO,cAAcX,GAHlBX,EAAciB,EAAUG,EAAUA,EAAUH,IAOvDrB,EAAM2B,UAAY,GAElBlB,EAAKJ,QAAQ,SAACuB,GACZ5B,EAAM6B,YAAYD","file":"main.926f26da.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const table = document.querySelector('table');\n  const tbody = table.querySelector('tbody');\n  const headers = table.querySelectorAll('th');\n  let currentSortColumn = null;\n  let isAscending = true;\n\n  headers.forEach((header, index) => {\n    header.addEventListener('click', () => {\n      const columnIndex = index;\n\n      if (columnIndex === currentSortColumn) {\n        isAscending = !isAscending;\n      } else {\n        isAscending = true;\n        currentSortColumn = columnIndex;\n      }\n\n      const rows = Array.from(tbody.querySelectorAll('tr'));\n\n      rows.sort((a, b) => {\n        const aValue = a.cells[columnIndex].textContent.trim();\n        const bValue = b.cells[columnIndex].textContent.trim();\n\n        const currencyRegex = /[$,]/g;\n        const aNumber = parseFloat(aValue.replace(currencyRegex, ''));\n        const bNumber = parseFloat(bValue.replace(currencyRegex, ''));\n\n        if (!isNaN(aNumber) && !isNaN(bNumber)) {\n          return isAscending ? aNumber - bNumber : bNumber - aNumber;\n        } else {\n          return isAscending ? aValue.localeCompare(bValue)\n            : bValue.localeCompare(aValue);\n        }\n      });\n\n      tbody.innerHTML = '';\n\n      rows.forEach((row) => {\n        tbody.appendChild(row);\n      });\n    });\n  });\n});\n"]}